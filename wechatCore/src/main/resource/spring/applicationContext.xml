<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">


	<!-- properties加载 -->
	<bean id="configProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:config/*.properties</value>
			</list>
		</property>
	</bean>

	<!-- spring变量替换 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>

	<!-- spring 加载properties文件 -->
	<context:property-placeholder location="classpath*:config/jdbc.properties"
		ignore-unresolvable="true" />
	<!-- 可读写 数据源 -->
	<bean id="dataSourceWrite" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.master.url}" />
		<property name="username" value="${jdbc.master.username}" />
		<property name="password" value="${jdbc.master.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.master.initialSize}" />
		<property name="minIdle" value="${jdbc.master.minIdle}" />
		<property name="maxActive" value="${jdbc.master.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT '1'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 mysql false -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,stat,log4j,wall" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean>
	<!-- 仅读不可写 数据源 -->
	<bean id="dataSourceRead" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.slave.url}" />
		<property name="username" value="${jdbc.slave.username}" />
		<property name="password" value="${jdbc.slave.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.slave.initialSize}" />
		<property name="minIdle" value="${jdbc.slave.minIdle}" />
		<property name="maxActive" value="${jdbc.slave.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT '1'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 mysql false -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,stat,log4j,wall" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean>

	<!-- 可写的SessionFactory sqlWriteSessionFactory -->
	<bean id="sqlWriteSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		scope="singleton">
		<property name="dataSource" ref="dataSourceWrite" />
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
	</bean>
	
	<bean id="writableSQLSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlWriteSessionFactory" />
	</bean>

	<!-- 只读的SessionFactory sqlReadOnlySessionFactory -->
	<bean id="sqlReadOnlySessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		scope="singleton">
		<property name="dataSource" ref="dataSourceRead" />
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
	</bean>

	<bean id="readonlySQLSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlReadOnlySessionFactory" />
	</bean>
	
	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceWrite" />
	</bean>
	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	
	<bean id="messageLogService" class="com.bilibala.wechat.service.impl.MessageLogServiceImpl">
	</bean>
	
	<bean id="userService" class="com.bilibala.wechat.service.impl.UserServiceImpl">
	</bean>
	
	<bean id="wechatAccountService" class="com.bilibala.wechat.service.impl.WechatAccountServiceImpl">
	</bean>
	
	<bean id="wechatCommonService" class="com.bilibala.wechat.service.impl.WechatCommonServiceImpl">
	</bean>
	
	<bean id="requestDispatchService" class="com.bilibala.wechat.service.impl.wechat.RequestDispatchServiceImpl">
		<property name="componentMap">
			<map>
				<entry key="text" value-ref="textRequestService"/>
				<entry key="image" value-ref="imageRequestService"/>
				<entry key="voice" value-ref="voiceRequestService"/>
				<entry key="video" value-ref="videoRequestService"/>
				<entry key="shortvideo" value-ref="shortvideoRequestService"/>
				<entry key="location" value-ref="locationRequestService"/>
				<entry key="link" value-ref="linkRequestService"/>
			</map>
		</property>
	</bean>
	
	<bean id="textRequestService" class="com.bilibala.wechat.service.impl.wechat.TextRequestServiceImpl">
	</bean>
	
	<bean id="imageRequestService" class="com.bilibala.wechat.service.impl.wechat.ImageRequestServiceImpl">
	</bean>
	
	<bean id="voiceRequestService" class="com.bilibala.wechat.service.impl.wechat.VoiceRequestServiceImpl">
	</bean>
	
	<bean id="videoRequestService" class="com.bilibala.wechat.service.impl.wechat.VideoRequestServiceImpl">
	</bean>
	
	<bean id="shortvideoRequestService" class="com.bilibala.wechat.service.impl.wechat.ShortvideoRequestServiceImpl">
	</bean>
	
	<bean id="locationRequestService" class="com.bilibala.wechat.service.impl.wechat.LocationRequestServiceImpl">
	</bean>
	
	<bean id="linkRequestService" class="com.bilibala.wechat.service.impl.wechat.LinkRequestServiceImpl">
	</bean>
	
	<bean id="eventRequestService" class="com.bilibala.wechat.service.impl.wechat.EventRequestServiceImpl">
		<property name="componentMap">
			<map>
				<entry key="subscribe" value-ref="subscribeEventRequestService"/>
				<entry key="unsubscribe" value-ref="unsubscribeEventRequestService"/>
				<entry key="scan" value-ref="scanEventRequestService"/>
				<entry key="location" value-ref="locationRequestService"/>
				<entry key="click" value-ref="clickEventRequestService"/>
				<entry key="view" value-ref="viewEventRequestService"/>
				<entry key="templatesendjobfinish" value-ref="templateEventRequestService"/>
			</map>
		</property>
	</bean>
	
	<bean id="subscribeEventRequestService" class="com.bilibala.wechat.service.impl.wechat.SubscribeEventRequestServiceImpl">
	</bean>
	
	<bean id="unsubscribeEventRequestService" class="com.bilibala.wechat.service.impl.wechat.UnsubscribeEventRequestServiceImpl">
	</bean>
	
	<bean id="scanEventRequestService" class="com.bilibala.wechat.service.impl.wechat.ScanEventRequestServiceImpl">
	</bean>
	
	<bean id="clickEventRequestService" class="com.bilibala.wechat.service.impl.wechat.ClickEventRequestServiceImpl">
	</bean>
	
	<bean id="viewEventRequestService" class="com.bilibala.wechat.service.impl.wechat.ViewEventRequestServiceImpl">
	</bean>
	
	<bean id="templateEventRequestService" class="com.bilibala.wechat.service.impl.wechat.TemplateEventRequestServiceImpl">
	</bean>
	
	<!-- 导入  dubbo 服务 -->
	<import resource="spring-provider.xml" />
	<import resource="spring-consumer.xml" />
	
</beans>